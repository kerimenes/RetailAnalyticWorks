// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_analytic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_analytic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_analytic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_analytic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_analytic_2eproto;
namespace retail {
class CustomerQ;
class CustomerQDefaultTypeInternal;
extern CustomerQDefaultTypeInternal _CustomerQ_default_instance_;
class EmployeeQ;
class EmployeeQDefaultTypeInternal;
extern EmployeeQDefaultTypeInternal _EmployeeQ_default_instance_;
class HotSpots;
class HotSpotsDefaultTypeInternal;
extern HotSpotsDefaultTypeInternal _HotSpots_default_instance_;
class OutputVideoDatas;
class OutputVideoDatasDefaultTypeInternal;
extern OutputVideoDatasDefaultTypeInternal _OutputVideoDatas_default_instance_;
class PosQ;
class PosQDefaultTypeInternal;
extern PosQDefaultTypeInternal _PosQ_default_instance_;
class ProductInfo;
class ProductInfoDefaultTypeInternal;
extern ProductInfoDefaultTypeInternal _ProductInfo_default_instance_;
class ProductQ;
class ProductQDefaultTypeInternal;
extern ProductQDefaultTypeInternal _ProductQ_default_instance_;
class StoreFrontCamera;
class StoreFrontCameraDefaultTypeInternal;
extern StoreFrontCameraDefaultTypeInternal _StoreFrontCamera_default_instance_;
class StoreQ;
class StoreQDefaultTypeInternal;
extern StoreQDefaultTypeInternal _StoreQ_default_instance_;
class Weather;
class WeatherDefaultTypeInternal;
extern WeatherDefaultTypeInternal _Weather_default_instance_;
}  // namespace retail
PROTOBUF_NAMESPACE_OPEN
template<> ::retail::CustomerQ* Arena::CreateMaybeMessage<::retail::CustomerQ>(Arena*);
template<> ::retail::EmployeeQ* Arena::CreateMaybeMessage<::retail::EmployeeQ>(Arena*);
template<> ::retail::HotSpots* Arena::CreateMaybeMessage<::retail::HotSpots>(Arena*);
template<> ::retail::OutputVideoDatas* Arena::CreateMaybeMessage<::retail::OutputVideoDatas>(Arena*);
template<> ::retail::PosQ* Arena::CreateMaybeMessage<::retail::PosQ>(Arena*);
template<> ::retail::ProductInfo* Arena::CreateMaybeMessage<::retail::ProductInfo>(Arena*);
template<> ::retail::ProductQ* Arena::CreateMaybeMessage<::retail::ProductQ>(Arena*);
template<> ::retail::StoreFrontCamera* Arena::CreateMaybeMessage<::retail::StoreFrontCamera>(Arena*);
template<> ::retail::StoreQ* Arena::CreateMaybeMessage<::retail::StoreQ>(Arena*);
template<> ::retail::Weather* Arena::CreateMaybeMessage<::retail::Weather>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace retail {

enum CustomerQ_Gender : int {
  CustomerQ_Gender_WOMAN = 0,
  CustomerQ_Gender_MAN = 1,
  CustomerQ_Gender_CustomerQ_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CustomerQ_Gender_CustomerQ_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CustomerQ_Gender_IsValid(int value);
constexpr CustomerQ_Gender CustomerQ_Gender_Gender_MIN = CustomerQ_Gender_WOMAN;
constexpr CustomerQ_Gender CustomerQ_Gender_Gender_MAX = CustomerQ_Gender_MAN;
constexpr int CustomerQ_Gender_Gender_ARRAYSIZE = CustomerQ_Gender_Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CustomerQ_Gender_descriptor();
template<typename T>
inline const std::string& CustomerQ_Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CustomerQ_Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CustomerQ_Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CustomerQ_Gender_descriptor(), enum_t_value);
}
inline bool CustomerQ_Gender_Parse(
    const std::string& name, CustomerQ_Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CustomerQ_Gender>(
    CustomerQ_Gender_descriptor(), name, value);
}
enum EmployeeQ_Gender : int {
  EmployeeQ_Gender_WOMAN = 0,
  EmployeeQ_Gender_MAN = 1,
  EmployeeQ_Gender_EmployeeQ_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EmployeeQ_Gender_EmployeeQ_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EmployeeQ_Gender_IsValid(int value);
constexpr EmployeeQ_Gender EmployeeQ_Gender_Gender_MIN = EmployeeQ_Gender_WOMAN;
constexpr EmployeeQ_Gender EmployeeQ_Gender_Gender_MAX = EmployeeQ_Gender_MAN;
constexpr int EmployeeQ_Gender_Gender_ARRAYSIZE = EmployeeQ_Gender_Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmployeeQ_Gender_descriptor();
template<typename T>
inline const std::string& EmployeeQ_Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmployeeQ_Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmployeeQ_Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmployeeQ_Gender_descriptor(), enum_t_value);
}
inline bool EmployeeQ_Gender_Parse(
    const std::string& name, EmployeeQ_Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmployeeQ_Gender>(
    EmployeeQ_Gender_descriptor(), name, value);
}
enum OutputVideoDatas_CustomerMood : int {
  OutputVideoDatas_CustomerMood_Happy = 0,
  OutputVideoDatas_CustomerMood_Sad = 1,
  OutputVideoDatas_CustomerMood_OutputVideoDatas_CustomerMood_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OutputVideoDatas_CustomerMood_OutputVideoDatas_CustomerMood_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OutputVideoDatas_CustomerMood_IsValid(int value);
constexpr OutputVideoDatas_CustomerMood OutputVideoDatas_CustomerMood_CustomerMood_MIN = OutputVideoDatas_CustomerMood_Happy;
constexpr OutputVideoDatas_CustomerMood OutputVideoDatas_CustomerMood_CustomerMood_MAX = OutputVideoDatas_CustomerMood_Sad;
constexpr int OutputVideoDatas_CustomerMood_CustomerMood_ARRAYSIZE = OutputVideoDatas_CustomerMood_CustomerMood_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputVideoDatas_CustomerMood_descriptor();
template<typename T>
inline const std::string& OutputVideoDatas_CustomerMood_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputVideoDatas_CustomerMood>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputVideoDatas_CustomerMood_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputVideoDatas_CustomerMood_descriptor(), enum_t_value);
}
inline bool OutputVideoDatas_CustomerMood_Parse(
    const std::string& name, OutputVideoDatas_CustomerMood* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputVideoDatas_CustomerMood>(
    OutputVideoDatas_CustomerMood_descriptor(), name, value);
}
enum Weather_Type : int {
  Weather_Type_CLOUDY = 0,
  Weather_Type_SNOWY = 1,
  Weather_Type_SUNNY = 2,
  Weather_Type_RAINY = 3,
  Weather_Type_Weather_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Weather_Type_Weather_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Weather_Type_IsValid(int value);
constexpr Weather_Type Weather_Type_Type_MIN = Weather_Type_CLOUDY;
constexpr Weather_Type Weather_Type_Type_MAX = Weather_Type_RAINY;
constexpr int Weather_Type_Type_ARRAYSIZE = Weather_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Weather_Type_descriptor();
template<typename T>
inline const std::string& Weather_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Weather_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Weather_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Weather_Type_descriptor(), enum_t_value);
}
inline bool Weather_Type_Parse(
    const std::string& name, Weather_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Weather_Type>(
    Weather_Type_descriptor(), name, value);
}
// ===================================================================

class CustomerQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.CustomerQ) */ {
 public:
  CustomerQ();
  virtual ~CustomerQ();

  CustomerQ(const CustomerQ& from);
  CustomerQ(CustomerQ&& from) noexcept
    : CustomerQ() {
    *this = ::std::move(from);
  }

  inline CustomerQ& operator=(const CustomerQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerQ& operator=(CustomerQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerQ* internal_default_instance() {
    return reinterpret_cast<const CustomerQ*>(
               &_CustomerQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CustomerQ* other);
  friend void swap(CustomerQ& a, CustomerQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerQ* New() const final {
    return CreateMaybeMessage<CustomerQ>(nullptr);
  }

  CustomerQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerQ& from);
  void MergeFrom(const CustomerQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.CustomerQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CustomerQ_Gender Gender;
  static constexpr Gender WOMAN =
    CustomerQ_Gender_WOMAN;
  static constexpr Gender MAN =
    CustomerQ_Gender_MAN;
  static inline bool Gender_IsValid(int value) {
    return CustomerQ_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN =
    CustomerQ_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX =
    CustomerQ_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE =
    CustomerQ_Gender_Gender_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gender_descriptor() {
    return CustomerQ_Gender_descriptor();
  }
  template<typename T>
  static inline const std::string& Gender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gender_Name.");
    return CustomerQ_Gender_Name(enum_t_value);
  }
  static inline bool Gender_Parse(const std::string& name,
      Gender* value) {
    return CustomerQ_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string email = 7;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);

  // string date = 9;
  void clear_date();
  static const int kDateFieldNumber = 9;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string time = 10;
  void clear_time();
  static const int kTimeFieldNumber = 10;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // int32 tc_no = 1;
  void clear_tc_no();
  static const int kTcNoFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no() const;
  void set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .retail.CustomerQ.Gender gender = 2;
  void clear_gender();
  static const int kGenderFieldNumber = 2;
  ::retail::CustomerQ_Gender gender() const;
  void set_gender(::retail::CustomerQ_Gender value);

  // int32 age = 4;
  void clear_age();
  static const int kAgeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 weight = 5;
  void clear_weight();
  static const int kWeightFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isPlayingAgeof = 8;
  void clear_isplayingageof();
  static const int kIsPlayingAgeofFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 isplayingageof() const;
  void set_isplayingageof(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.CustomerQ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 isplayingageof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class EmployeeQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.EmployeeQ) */ {
 public:
  EmployeeQ();
  virtual ~EmployeeQ();

  EmployeeQ(const EmployeeQ& from);
  EmployeeQ(EmployeeQ&& from) noexcept
    : EmployeeQ() {
    *this = ::std::move(from);
  }

  inline EmployeeQ& operator=(const EmployeeQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmployeeQ& operator=(EmployeeQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmployeeQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmployeeQ* internal_default_instance() {
    return reinterpret_cast<const EmployeeQ*>(
               &_EmployeeQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EmployeeQ* other);
  friend void swap(EmployeeQ& a, EmployeeQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmployeeQ* New() const final {
    return CreateMaybeMessage<EmployeeQ>(nullptr);
  }

  EmployeeQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmployeeQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmployeeQ& from);
  void MergeFrom(const EmployeeQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeeQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.EmployeeQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EmployeeQ_Gender Gender;
  static constexpr Gender WOMAN =
    EmployeeQ_Gender_WOMAN;
  static constexpr Gender MAN =
    EmployeeQ_Gender_MAN;
  static inline bool Gender_IsValid(int value) {
    return EmployeeQ_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN =
    EmployeeQ_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX =
    EmployeeQ_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE =
    EmployeeQ_Gender_Gender_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gender_descriptor() {
    return EmployeeQ_Gender_descriptor();
  }
  template<typename T>
  static inline const std::string& Gender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gender_Name.");
    return EmployeeQ_Gender_Name(enum_t_value);
  }
  static inline bool Gender_Parse(const std::string& name,
      Gender* value) {
    return EmployeeQ_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string date = 6;
  void clear_date();
  static const int kDateFieldNumber = 6;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string time = 7;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // int32 tc_no = 1;
  void clear_tc_no();
  static const int kTcNoFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no() const;
  void set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .retail.EmployeeQ.Gender gender = 3;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  ::retail::EmployeeQ_Gender gender() const;
  void set_gender(::retail::EmployeeQ_Gender value);

  // int32 age = 4;
  void clear_age();
  static const int kAgeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 location = 5;
  void clear_location();
  static const int kLocationFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.EmployeeQ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class ProductQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.ProductQ) */ {
 public:
  ProductQ();
  virtual ~ProductQ();

  ProductQ(const ProductQ& from);
  ProductQ(ProductQ&& from) noexcept
    : ProductQ() {
    *this = ::std::move(from);
  }

  inline ProductQ& operator=(const ProductQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductQ& operator=(ProductQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProductQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductQ* internal_default_instance() {
    return reinterpret_cast<const ProductQ*>(
               &_ProductQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProductQ* other);
  friend void swap(ProductQ& a, ProductQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductQ* New() const final {
    return CreateMaybeMessage<ProductQ>(nullptr);
  }

  ProductQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductQ& from);
  void MergeFrom(const ProductQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.ProductQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string colour = 5;
  void clear_colour();
  static const int kColourFieldNumber = 5;
  const std::string& colour() const;
  void set_colour(const std::string& value);
  void set_colour(std::string&& value);
  void set_colour(const char* value);
  void set_colour(const char* value, size_t size);
  std::string* mutable_colour();
  std::string* release_colour();
  void set_allocated_colour(std::string* colour);

  // int32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 buying_price = 4;
  void clear_buying_price();
  static const int kBuyingPriceFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 buying_price() const;
  void set_buying_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.ProductQ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colour_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 buying_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class ProductInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.ProductInfo) */ {
 public:
  ProductInfo();
  virtual ~ProductInfo();

  ProductInfo(const ProductInfo& from);
  ProductInfo(ProductInfo&& from) noexcept
    : ProductInfo() {
    *this = ::std::move(from);
  }

  inline ProductInfo& operator=(const ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductInfo& operator=(ProductInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProductInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductInfo* internal_default_instance() {
    return reinterpret_cast<const ProductInfo*>(
               &_ProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProductInfo* other);
  friend void swap(ProductInfo& a, ProductInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductInfo* New() const final {
    return CreateMaybeMessage<ProductInfo>(nullptr);
  }

  ProductInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductInfo& from);
  void MergeFrom(const ProductInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.ProductInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .retail.ProductQ productQ = 1;
  bool has_productq() const;
  void clear_productq();
  static const int kProductQFieldNumber = 1;
  const ::retail::ProductQ& productq() const;
  ::retail::ProductQ* release_productq();
  ::retail::ProductQ* mutable_productq();
  void set_allocated_productq(::retail::ProductQ* productq);

  // int32 stock_size = 2;
  void clear_stock_size();
  static const int kStockSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 stock_size() const;
  void set_stock_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 selling_price = 5;
  void clear_selling_price();
  static const int kSellingPriceFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 selling_price() const;
  void set_selling_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.ProductInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::retail::ProductQ* productq_;
  ::PROTOBUF_NAMESPACE_ID::int32 stock_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 selling_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class StoreQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.StoreQ) */ {
 public:
  StoreQ();
  virtual ~StoreQ();

  StoreQ(const StoreQ& from);
  StoreQ(StoreQ&& from) noexcept
    : StoreQ() {
    *this = ::std::move(from);
  }

  inline StoreQ& operator=(const StoreQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreQ& operator=(StoreQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreQ* internal_default_instance() {
    return reinterpret_cast<const StoreQ*>(
               &_StoreQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StoreQ* other);
  friend void swap(StoreQ& a, StoreQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreQ* New() const final {
    return CreateMaybeMessage<StoreQ>(nullptr);
  }

  StoreQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreQ& from);
  void MergeFrom(const StoreQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.StoreQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .retail.ProductInfo productInfo = 4;
  int productinfo_size() const;
  void clear_productinfo();
  static const int kProductInfoFieldNumber = 4;
  ::retail::ProductInfo* mutable_productinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >*
      mutable_productinfo();
  const ::retail::ProductInfo& productinfo(int index) const;
  ::retail::ProductInfo* add_productinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >&
      productinfo() const;

  // repeated .retail.EmployeeQ employeeQ = 5;
  int employeeq_size() const;
  void clear_employeeq();
  static const int kEmployeeQFieldNumber = 5;
  ::retail::EmployeeQ* mutable_employeeq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >*
      mutable_employeeq();
  const ::retail::EmployeeQ& employeeq(int index) const;
  ::retail::EmployeeQ* add_employeeq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >&
      employeeq() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_expense = 6;
  void clear_total_expense();
  static const int kTotalExpenseFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 total_expense() const;
  void set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.StoreQ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo > productinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ > employeeq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_expense_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class PosQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.PosQ) */ {
 public:
  PosQ();
  virtual ~PosQ();

  PosQ(const PosQ& from);
  PosQ(PosQ&& from) noexcept
    : PosQ() {
    *this = ::std::move(from);
  }

  inline PosQ& operator=(const PosQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosQ& operator=(PosQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosQ* internal_default_instance() {
    return reinterpret_cast<const PosQ*>(
               &_PosQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PosQ* other);
  friend void swap(PosQ& a, PosQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PosQ* New() const final {
    return CreateMaybeMessage<PosQ>(nullptr);
  }

  PosQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosQ& from);
  void MergeFrom(const PosQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.PosQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .retail.ProductInfo productInfo = 3;
  int productinfo_size() const;
  void clear_productinfo();
  static const int kProductInfoFieldNumber = 3;
  ::retail::ProductInfo* mutable_productinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >*
      mutable_productinfo();
  const ::retail::ProductInfo& productinfo(int index) const;
  ::retail::ProductInfo* add_productinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >&
      productinfo() const;

  // string date = 1;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // .retail.EmployeeQ employeeQ = 4;
  bool has_employeeq() const;
  void clear_employeeq();
  static const int kEmployeeQFieldNumber = 4;
  const ::retail::EmployeeQ& employeeq() const;
  ::retail::EmployeeQ* release_employeeq();
  ::retail::EmployeeQ* mutable_employeeq();
  void set_allocated_employeeq(::retail::EmployeeQ* employeeq);

  // .retail.CustomerQ customerQ = 5;
  bool has_customerq() const;
  void clear_customerq();
  static const int kCustomerQFieldNumber = 5;
  const ::retail::CustomerQ& customerq() const;
  ::retail::CustomerQ* release_customerq();
  ::retail::CustomerQ* mutable_customerq();
  void set_allocated_customerq(::retail::CustomerQ* customerq);

  // int32 store_id = 6;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id() const;
  void set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.PosQ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo > productinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::retail::EmployeeQ* employeeq_;
  ::retail::CustomerQ* customerq_;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class OutputVideoDatas :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.OutputVideoDatas) */ {
 public:
  OutputVideoDatas();
  virtual ~OutputVideoDatas();

  OutputVideoDatas(const OutputVideoDatas& from);
  OutputVideoDatas(OutputVideoDatas&& from) noexcept
    : OutputVideoDatas() {
    *this = ::std::move(from);
  }

  inline OutputVideoDatas& operator=(const OutputVideoDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputVideoDatas& operator=(OutputVideoDatas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputVideoDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputVideoDatas* internal_default_instance() {
    return reinterpret_cast<const OutputVideoDatas*>(
               &_OutputVideoDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OutputVideoDatas* other);
  friend void swap(OutputVideoDatas& a, OutputVideoDatas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputVideoDatas* New() const final {
    return CreateMaybeMessage<OutputVideoDatas>(nullptr);
  }

  OutputVideoDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputVideoDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputVideoDatas& from);
  void MergeFrom(const OutputVideoDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputVideoDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.OutputVideoDatas";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OutputVideoDatas_CustomerMood CustomerMood;
  static constexpr CustomerMood Happy =
    OutputVideoDatas_CustomerMood_Happy;
  static constexpr CustomerMood Sad =
    OutputVideoDatas_CustomerMood_Sad;
  static inline bool CustomerMood_IsValid(int value) {
    return OutputVideoDatas_CustomerMood_IsValid(value);
  }
  static constexpr CustomerMood CustomerMood_MIN =
    OutputVideoDatas_CustomerMood_CustomerMood_MIN;
  static constexpr CustomerMood CustomerMood_MAX =
    OutputVideoDatas_CustomerMood_CustomerMood_MAX;
  static constexpr int CustomerMood_ARRAYSIZE =
    OutputVideoDatas_CustomerMood_CustomerMood_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CustomerMood_descriptor() {
    return OutputVideoDatas_CustomerMood_descriptor();
  }
  template<typename T>
  static inline const std::string& CustomerMood_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CustomerMood>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CustomerMood_Name.");
    return OutputVideoDatas_CustomerMood_Name(enum_t_value);
  }
  static inline bool CustomerMood_Parse(const std::string& name,
      CustomerMood* value) {
    return OutputVideoDatas_CustomerMood_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .retail.OutputVideoDatas.CustomerMood mood = 1;
  void clear_mood();
  static const int kMoodFieldNumber = 1;
  ::retail::OutputVideoDatas_CustomerMood mood() const;
  void set_mood(::retail::OutputVideoDatas_CustomerMood value);

  // int32 tc_no = 2;
  void clear_tc_no();
  static const int kTcNoFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no() const;
  void set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 store_id = 3;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id() const;
  void set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.OutputVideoDatas)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int mood_;
  ::PROTOBUF_NAMESPACE_ID::int32 tc_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class StoreFrontCamera :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.StoreFrontCamera) */ {
 public:
  StoreFrontCamera();
  virtual ~StoreFrontCamera();

  StoreFrontCamera(const StoreFrontCamera& from);
  StoreFrontCamera(StoreFrontCamera&& from) noexcept
    : StoreFrontCamera() {
    *this = ::std::move(from);
  }

  inline StoreFrontCamera& operator=(const StoreFrontCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreFrontCamera& operator=(StoreFrontCamera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreFrontCamera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreFrontCamera* internal_default_instance() {
    return reinterpret_cast<const StoreFrontCamera*>(
               &_StoreFrontCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StoreFrontCamera* other);
  friend void swap(StoreFrontCamera& a, StoreFrontCamera& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreFrontCamera* New() const final {
    return CreateMaybeMessage<StoreFrontCamera>(nullptr);
  }

  StoreFrontCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreFrontCamera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreFrontCamera& from);
  void MergeFrom(const StoreFrontCamera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreFrontCamera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.StoreFrontCamera";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 store_id = 1;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id() const;
  void set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 window_shoppers = 2;
  void clear_window_shoppers();
  static const int kWindowShoppersFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 window_shoppers() const;
  void set_window_shoppers(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 passing_count = 3;
  void clear_passing_count();
  static const int kPassingCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 passing_count() const;
  void set_passing_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 go_in_count = 4;
  void clear_go_in_count();
  static const int kGoInCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 go_in_count() const;
  void set_go_in_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.StoreFrontCamera)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_shoppers_;
  ::PROTOBUF_NAMESPACE_ID::int32 passing_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 go_in_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class HotSpots :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.HotSpots) */ {
 public:
  HotSpots();
  virtual ~HotSpots();

  HotSpots(const HotSpots& from);
  HotSpots(HotSpots&& from) noexcept
    : HotSpots() {
    *this = ::std::move(from);
  }

  inline HotSpots& operator=(const HotSpots& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotSpots& operator=(HotSpots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotSpots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HotSpots* internal_default_instance() {
    return reinterpret_cast<const HotSpots*>(
               &_HotSpots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(HotSpots* other);
  friend void swap(HotSpots& a, HotSpots& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HotSpots* New() const final {
    return CreateMaybeMessage<HotSpots>(nullptr);
  }

  HotSpots* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotSpots>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotSpots& from);
  void MergeFrom(const HotSpots& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotSpots* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.HotSpots";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .retail.EmployeeQ employeeQ = 6;
  int employeeq_size() const;
  void clear_employeeq();
  static const int kEmployeeQFieldNumber = 6;
  ::retail::EmployeeQ* mutable_employeeq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >*
      mutable_employeeq();
  const ::retail::EmployeeQ& employeeq(int index) const;
  ::retail::EmployeeQ* add_employeeq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >&
      employeeq() const;

  // repeated .retail.CustomerQ customerQ = 7;
  int customerq_size() const;
  void clear_customerq();
  static const int kCustomerQFieldNumber = 7;
  ::retail::CustomerQ* mutable_customerq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::CustomerQ >*
      mutable_customerq();
  const ::retail::CustomerQ& customerq(int index) const;
  ::retail::CustomerQ* add_customerq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::CustomerQ >&
      customerq() const;

  // string date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // int32 location = 1;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 store_id = 2;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id() const;
  void set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 counts = 3;
  void clear_counts();
  static const int kCountsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 counts() const;
  void set_counts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:retail.HotSpots)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ > employeeq_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::CustomerQ > customerq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  ::PROTOBUF_NAMESPACE_ID::int32 store_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// -------------------------------------------------------------------

class Weather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:retail.Weather) */ {
 public:
  Weather();
  virtual ~Weather();

  Weather(const Weather& from);
  Weather(Weather&& from) noexcept
    : Weather() {
    *this = ::std::move(from);
  }

  inline Weather& operator=(const Weather& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weather& operator=(Weather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Weather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Weather* internal_default_instance() {
    return reinterpret_cast<const Weather*>(
               &_Weather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Weather* other);
  friend void swap(Weather& a, Weather& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Weather* New() const final {
    return CreateMaybeMessage<Weather>(nullptr);
  }

  Weather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Weather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Weather& from);
  void MergeFrom(const Weather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "retail.Weather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analytic_2eproto);
    return ::descriptor_table_analytic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Weather_Type Type;
  static constexpr Type CLOUDY =
    Weather_Type_CLOUDY;
  static constexpr Type SNOWY =
    Weather_Type_SNOWY;
  static constexpr Type SUNNY =
    Weather_Type_SUNNY;
  static constexpr Type RAINY =
    Weather_Type_RAINY;
  static inline bool Type_IsValid(int value) {
    return Weather_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Weather_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Weather_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Weather_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Weather_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Weather_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Weather_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // .retail.Weather.Type w_type = 1;
  void clear_w_type();
  static const int kWTypeFieldNumber = 1;
  ::retail::Weather_Type w_type() const;
  void set_w_type(::retail::Weather_Type value);

  // @@protoc_insertion_point(class_scope:retail.Weather)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  int w_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_analytic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomerQ

// int32 tc_no = 1;
inline void CustomerQ::clear_tc_no() {
  tc_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerQ::tc_no() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.tc_no)
  return tc_no_;
}
inline void CustomerQ::set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tc_no_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.tc_no)
}

// .retail.CustomerQ.Gender gender = 2;
inline void CustomerQ::clear_gender() {
  gender_ = 0;
}
inline ::retail::CustomerQ_Gender CustomerQ::gender() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.gender)
  return static_cast< ::retail::CustomerQ_Gender >(gender_);
}
inline void CustomerQ::set_gender(::retail::CustomerQ_Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.gender)
}

// string name = 3;
inline void CustomerQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CustomerQ::name() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.name)
  return name_.GetNoArena();
}
inline void CustomerQ::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.CustomerQ.name)
}
inline void CustomerQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.CustomerQ.name)
}
inline void CustomerQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.CustomerQ.name)
}
inline void CustomerQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.CustomerQ.name)
}
inline std::string* CustomerQ::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:retail.CustomerQ.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomerQ::release_name() {
  // @@protoc_insertion_point(field_release:retail.CustomerQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:retail.CustomerQ.name)
}

// int32 age = 4;
inline void CustomerQ::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerQ::age() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.age)
  return age_;
}
inline void CustomerQ::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.age)
}

// int32 weight = 5;
inline void CustomerQ::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerQ::weight() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.weight)
  return weight_;
}
inline void CustomerQ::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.weight)
}

// int32 height = 6;
inline void CustomerQ::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerQ::height() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.height)
  return height_;
}
inline void CustomerQ::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.height)
}

// string email = 7;
inline void CustomerQ::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CustomerQ::email() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.email)
  return email_.GetNoArena();
}
inline void CustomerQ::set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.CustomerQ.email)
}
inline void CustomerQ::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.CustomerQ.email)
}
inline void CustomerQ::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.CustomerQ.email)
}
inline void CustomerQ::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.CustomerQ.email)
}
inline std::string* CustomerQ::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:retail.CustomerQ.email)
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomerQ::release_email() {
  // @@protoc_insertion_point(field_release:retail.CustomerQ.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerQ::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:retail.CustomerQ.email)
}

// int32 isPlayingAgeof = 8;
inline void CustomerQ::clear_isplayingageof() {
  isplayingageof_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerQ::isplayingageof() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.isPlayingAgeof)
  return isplayingageof_;
}
inline void CustomerQ::set_isplayingageof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isplayingageof_ = value;
  // @@protoc_insertion_point(field_set:retail.CustomerQ.isPlayingAgeof)
}

// string date = 9;
inline void CustomerQ::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CustomerQ::date() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.date)
  return date_.GetNoArena();
}
inline void CustomerQ::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.CustomerQ.date)
}
inline void CustomerQ::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.CustomerQ.date)
}
inline void CustomerQ::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.CustomerQ.date)
}
inline void CustomerQ::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.CustomerQ.date)
}
inline std::string* CustomerQ::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:retail.CustomerQ.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomerQ::release_date() {
  // @@protoc_insertion_point(field_release:retail.CustomerQ.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerQ::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:retail.CustomerQ.date)
}

// string time = 10;
inline void CustomerQ::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CustomerQ::time() const {
  // @@protoc_insertion_point(field_get:retail.CustomerQ.time)
  return time_.GetNoArena();
}
inline void CustomerQ::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.CustomerQ.time)
}
inline void CustomerQ::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.CustomerQ.time)
}
inline void CustomerQ::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.CustomerQ.time)
}
inline void CustomerQ::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.CustomerQ.time)
}
inline std::string* CustomerQ::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:retail.CustomerQ.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomerQ::release_time() {
  // @@protoc_insertion_point(field_release:retail.CustomerQ.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerQ::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:retail.CustomerQ.time)
}

// -------------------------------------------------------------------

// EmployeeQ

// int32 tc_no = 1;
inline void EmployeeQ::clear_tc_no() {
  tc_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EmployeeQ::tc_no() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.tc_no)
  return tc_no_;
}
inline void EmployeeQ::set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tc_no_ = value;
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.tc_no)
}

// string name = 2;
inline void EmployeeQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmployeeQ::name() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.name)
  return name_.GetNoArena();
}
inline void EmployeeQ::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.name)
}
inline void EmployeeQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.EmployeeQ.name)
}
inline void EmployeeQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.EmployeeQ.name)
}
inline void EmployeeQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.EmployeeQ.name)
}
inline std::string* EmployeeQ::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:retail.EmployeeQ.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmployeeQ::release_name() {
  // @@protoc_insertion_point(field_release:retail.EmployeeQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:retail.EmployeeQ.name)
}

// .retail.EmployeeQ.Gender gender = 3;
inline void EmployeeQ::clear_gender() {
  gender_ = 0;
}
inline ::retail::EmployeeQ_Gender EmployeeQ::gender() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.gender)
  return static_cast< ::retail::EmployeeQ_Gender >(gender_);
}
inline void EmployeeQ::set_gender(::retail::EmployeeQ_Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.gender)
}

// int32 age = 4;
inline void EmployeeQ::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EmployeeQ::age() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.age)
  return age_;
}
inline void EmployeeQ::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.age)
}

// int32 location = 5;
inline void EmployeeQ::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EmployeeQ::location() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.location)
  return location_;
}
inline void EmployeeQ::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.location)
}

// string date = 6;
inline void EmployeeQ::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmployeeQ::date() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.date)
  return date_.GetNoArena();
}
inline void EmployeeQ::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.date)
}
inline void EmployeeQ::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.EmployeeQ.date)
}
inline void EmployeeQ::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.EmployeeQ.date)
}
inline void EmployeeQ::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.EmployeeQ.date)
}
inline std::string* EmployeeQ::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:retail.EmployeeQ.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmployeeQ::release_date() {
  // @@protoc_insertion_point(field_release:retail.EmployeeQ.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeQ::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:retail.EmployeeQ.date)
}

// string time = 7;
inline void EmployeeQ::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmployeeQ::time() const {
  // @@protoc_insertion_point(field_get:retail.EmployeeQ.time)
  return time_.GetNoArena();
}
inline void EmployeeQ::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.EmployeeQ.time)
}
inline void EmployeeQ::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.EmployeeQ.time)
}
inline void EmployeeQ::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.EmployeeQ.time)
}
inline void EmployeeQ::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.EmployeeQ.time)
}
inline std::string* EmployeeQ::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:retail.EmployeeQ.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmployeeQ::release_time() {
  // @@protoc_insertion_point(field_release:retail.EmployeeQ.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmployeeQ::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:retail.EmployeeQ.time)
}

// -------------------------------------------------------------------

// ProductQ

// string category = 1;
inline void ProductQ::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProductQ::category() const {
  // @@protoc_insertion_point(field_get:retail.ProductQ.category)
  return category_.GetNoArena();
}
inline void ProductQ::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.ProductQ.category)
}
inline void ProductQ::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.ProductQ.category)
}
inline void ProductQ::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.ProductQ.category)
}
inline void ProductQ::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.ProductQ.category)
}
inline std::string* ProductQ::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:retail.ProductQ.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductQ::release_category() {
  // @@protoc_insertion_point(field_release:retail.ProductQ.category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductQ::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:retail.ProductQ.category)
}

// string name = 2;
inline void ProductQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProductQ::name() const {
  // @@protoc_insertion_point(field_get:retail.ProductQ.name)
  return name_.GetNoArena();
}
inline void ProductQ::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.ProductQ.name)
}
inline void ProductQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.ProductQ.name)
}
inline void ProductQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.ProductQ.name)
}
inline void ProductQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.ProductQ.name)
}
inline std::string* ProductQ::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:retail.ProductQ.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductQ::release_name() {
  // @@protoc_insertion_point(field_release:retail.ProductQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:retail.ProductQ.name)
}

// int32 id = 3;
inline void ProductQ::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductQ::id() const {
  // @@protoc_insertion_point(field_get:retail.ProductQ.id)
  return id_;
}
inline void ProductQ::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:retail.ProductQ.id)
}

// int32 buying_price = 4;
inline void ProductQ::clear_buying_price() {
  buying_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductQ::buying_price() const {
  // @@protoc_insertion_point(field_get:retail.ProductQ.buying_price)
  return buying_price_;
}
inline void ProductQ::set_buying_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buying_price_ = value;
  // @@protoc_insertion_point(field_set:retail.ProductQ.buying_price)
}

// string colour = 5;
inline void ProductQ::clear_colour() {
  colour_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProductQ::colour() const {
  // @@protoc_insertion_point(field_get:retail.ProductQ.colour)
  return colour_.GetNoArena();
}
inline void ProductQ::set_colour(const std::string& value) {
  
  colour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.ProductQ.colour)
}
inline void ProductQ::set_colour(std::string&& value) {
  
  colour_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.ProductQ.colour)
}
inline void ProductQ::set_colour(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  colour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.ProductQ.colour)
}
inline void ProductQ::set_colour(const char* value, size_t size) {
  
  colour_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.ProductQ.colour)
}
inline std::string* ProductQ::mutable_colour() {
  
  // @@protoc_insertion_point(field_mutable:retail.ProductQ.colour)
  return colour_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductQ::release_colour() {
  // @@protoc_insertion_point(field_release:retail.ProductQ.colour)
  
  return colour_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductQ::set_allocated_colour(std::string* colour) {
  if (colour != nullptr) {
    
  } else {
    
  }
  colour_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colour);
  // @@protoc_insertion_point(field_set_allocated:retail.ProductQ.colour)
}

// -------------------------------------------------------------------

// ProductInfo

// .retail.ProductQ productQ = 1;
inline bool ProductInfo::has_productq() const {
  return this != internal_default_instance() && productq_ != nullptr;
}
inline void ProductInfo::clear_productq() {
  if (GetArenaNoVirtual() == nullptr && productq_ != nullptr) {
    delete productq_;
  }
  productq_ = nullptr;
}
inline const ::retail::ProductQ& ProductInfo::productq() const {
  const ::retail::ProductQ* p = productq_;
  // @@protoc_insertion_point(field_get:retail.ProductInfo.productQ)
  return p != nullptr ? *p : *reinterpret_cast<const ::retail::ProductQ*>(
      &::retail::_ProductQ_default_instance_);
}
inline ::retail::ProductQ* ProductInfo::release_productq() {
  // @@protoc_insertion_point(field_release:retail.ProductInfo.productQ)
  
  ::retail::ProductQ* temp = productq_;
  productq_ = nullptr;
  return temp;
}
inline ::retail::ProductQ* ProductInfo::mutable_productq() {
  
  if (productq_ == nullptr) {
    auto* p = CreateMaybeMessage<::retail::ProductQ>(GetArenaNoVirtual());
    productq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:retail.ProductInfo.productQ)
  return productq_;
}
inline void ProductInfo::set_allocated_productq(::retail::ProductQ* productq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete productq_;
  }
  if (productq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      productq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, productq, submessage_arena);
    }
    
  } else {
    
  }
  productq_ = productq;
  // @@protoc_insertion_point(field_set_allocated:retail.ProductInfo.productQ)
}

// int32 stock_size = 2;
inline void ProductInfo::clear_stock_size() {
  stock_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductInfo::stock_size() const {
  // @@protoc_insertion_point(field_get:retail.ProductInfo.stock_size)
  return stock_size_;
}
inline void ProductInfo::set_stock_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stock_size_ = value;
  // @@protoc_insertion_point(field_set:retail.ProductInfo.stock_size)
}

// int32 location = 3;
inline void ProductInfo::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductInfo::location() const {
  // @@protoc_insertion_point(field_get:retail.ProductInfo.location)
  return location_;
}
inline void ProductInfo::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:retail.ProductInfo.location)
}

// int32 selling_price = 5;
inline void ProductInfo::clear_selling_price() {
  selling_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductInfo::selling_price() const {
  // @@protoc_insertion_point(field_get:retail.ProductInfo.selling_price)
  return selling_price_;
}
inline void ProductInfo::set_selling_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selling_price_ = value;
  // @@protoc_insertion_point(field_set:retail.ProductInfo.selling_price)
}

// -------------------------------------------------------------------

// StoreQ

// string name = 1;
inline void StoreQ::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreQ::name() const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.name)
  return name_.GetNoArena();
}
inline void StoreQ::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.StoreQ.name)
}
inline void StoreQ::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.StoreQ.name)
}
inline void StoreQ::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.StoreQ.name)
}
inline void StoreQ::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.StoreQ.name)
}
inline std::string* StoreQ::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:retail.StoreQ.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreQ::release_name() {
  // @@protoc_insertion_point(field_release:retail.StoreQ.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:retail.StoreQ.name)
}

// int32 id = 2;
inline void StoreQ::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreQ::id() const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.id)
  return id_;
}
inline void StoreQ::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreQ.id)
}

// string location = 3;
inline void StoreQ::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreQ::location() const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.location)
  return location_.GetNoArena();
}
inline void StoreQ::set_location(const std::string& value) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.StoreQ.location)
}
inline void StoreQ::set_location(std::string&& value) {
  
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.StoreQ.location)
}
inline void StoreQ::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.StoreQ.location)
}
inline void StoreQ::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.StoreQ.location)
}
inline std::string* StoreQ::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:retail.StoreQ.location)
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreQ::release_location() {
  // @@protoc_insertion_point(field_release:retail.StoreQ.location)
  
  return location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreQ::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:retail.StoreQ.location)
}

// repeated .retail.ProductInfo productInfo = 4;
inline int StoreQ::productinfo_size() const {
  return productinfo_.size();
}
inline void StoreQ::clear_productinfo() {
  productinfo_.Clear();
}
inline ::retail::ProductInfo* StoreQ::mutable_productinfo(int index) {
  // @@protoc_insertion_point(field_mutable:retail.StoreQ.productInfo)
  return productinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >*
StoreQ::mutable_productinfo() {
  // @@protoc_insertion_point(field_mutable_list:retail.StoreQ.productInfo)
  return &productinfo_;
}
inline const ::retail::ProductInfo& StoreQ::productinfo(int index) const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.productInfo)
  return productinfo_.Get(index);
}
inline ::retail::ProductInfo* StoreQ::add_productinfo() {
  // @@protoc_insertion_point(field_add:retail.StoreQ.productInfo)
  return productinfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >&
StoreQ::productinfo() const {
  // @@protoc_insertion_point(field_list:retail.StoreQ.productInfo)
  return productinfo_;
}

// repeated .retail.EmployeeQ employeeQ = 5;
inline int StoreQ::employeeq_size() const {
  return employeeq_.size();
}
inline void StoreQ::clear_employeeq() {
  employeeq_.Clear();
}
inline ::retail::EmployeeQ* StoreQ::mutable_employeeq(int index) {
  // @@protoc_insertion_point(field_mutable:retail.StoreQ.employeeQ)
  return employeeq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >*
StoreQ::mutable_employeeq() {
  // @@protoc_insertion_point(field_mutable_list:retail.StoreQ.employeeQ)
  return &employeeq_;
}
inline const ::retail::EmployeeQ& StoreQ::employeeq(int index) const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.employeeQ)
  return employeeq_.Get(index);
}
inline ::retail::EmployeeQ* StoreQ::add_employeeq() {
  // @@protoc_insertion_point(field_add:retail.StoreQ.employeeQ)
  return employeeq_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >&
StoreQ::employeeq() const {
  // @@protoc_insertion_point(field_list:retail.StoreQ.employeeQ)
  return employeeq_;
}

// int32 total_expense = 6;
inline void StoreQ::clear_total_expense() {
  total_expense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreQ::total_expense() const {
  // @@protoc_insertion_point(field_get:retail.StoreQ.total_expense)
  return total_expense_;
}
inline void StoreQ::set_total_expense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_expense_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreQ.total_expense)
}

// -------------------------------------------------------------------

// PosQ

// string date = 1;
inline void PosQ::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PosQ::date() const {
  // @@protoc_insertion_point(field_get:retail.PosQ.date)
  return date_.GetNoArena();
}
inline void PosQ::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.PosQ.date)
}
inline void PosQ::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.PosQ.date)
}
inline void PosQ::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.PosQ.date)
}
inline void PosQ::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.PosQ.date)
}
inline std::string* PosQ::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:retail.PosQ.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PosQ::release_date() {
  // @@protoc_insertion_point(field_release:retail.PosQ.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PosQ::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:retail.PosQ.date)
}

// string time = 2;
inline void PosQ::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PosQ::time() const {
  // @@protoc_insertion_point(field_get:retail.PosQ.time)
  return time_.GetNoArena();
}
inline void PosQ::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.PosQ.time)
}
inline void PosQ::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.PosQ.time)
}
inline void PosQ::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.PosQ.time)
}
inline void PosQ::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.PosQ.time)
}
inline std::string* PosQ::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:retail.PosQ.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PosQ::release_time() {
  // @@protoc_insertion_point(field_release:retail.PosQ.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PosQ::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:retail.PosQ.time)
}

// repeated .retail.ProductInfo productInfo = 3;
inline int PosQ::productinfo_size() const {
  return productinfo_.size();
}
inline void PosQ::clear_productinfo() {
  productinfo_.Clear();
}
inline ::retail::ProductInfo* PosQ::mutable_productinfo(int index) {
  // @@protoc_insertion_point(field_mutable:retail.PosQ.productInfo)
  return productinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >*
PosQ::mutable_productinfo() {
  // @@protoc_insertion_point(field_mutable_list:retail.PosQ.productInfo)
  return &productinfo_;
}
inline const ::retail::ProductInfo& PosQ::productinfo(int index) const {
  // @@protoc_insertion_point(field_get:retail.PosQ.productInfo)
  return productinfo_.Get(index);
}
inline ::retail::ProductInfo* PosQ::add_productinfo() {
  // @@protoc_insertion_point(field_add:retail.PosQ.productInfo)
  return productinfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::ProductInfo >&
PosQ::productinfo() const {
  // @@protoc_insertion_point(field_list:retail.PosQ.productInfo)
  return productinfo_;
}

// .retail.EmployeeQ employeeQ = 4;
inline bool PosQ::has_employeeq() const {
  return this != internal_default_instance() && employeeq_ != nullptr;
}
inline void PosQ::clear_employeeq() {
  if (GetArenaNoVirtual() == nullptr && employeeq_ != nullptr) {
    delete employeeq_;
  }
  employeeq_ = nullptr;
}
inline const ::retail::EmployeeQ& PosQ::employeeq() const {
  const ::retail::EmployeeQ* p = employeeq_;
  // @@protoc_insertion_point(field_get:retail.PosQ.employeeQ)
  return p != nullptr ? *p : *reinterpret_cast<const ::retail::EmployeeQ*>(
      &::retail::_EmployeeQ_default_instance_);
}
inline ::retail::EmployeeQ* PosQ::release_employeeq() {
  // @@protoc_insertion_point(field_release:retail.PosQ.employeeQ)
  
  ::retail::EmployeeQ* temp = employeeq_;
  employeeq_ = nullptr;
  return temp;
}
inline ::retail::EmployeeQ* PosQ::mutable_employeeq() {
  
  if (employeeq_ == nullptr) {
    auto* p = CreateMaybeMessage<::retail::EmployeeQ>(GetArenaNoVirtual());
    employeeq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:retail.PosQ.employeeQ)
  return employeeq_;
}
inline void PosQ::set_allocated_employeeq(::retail::EmployeeQ* employeeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete employeeq_;
  }
  if (employeeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      employeeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, employeeq, submessage_arena);
    }
    
  } else {
    
  }
  employeeq_ = employeeq;
  // @@protoc_insertion_point(field_set_allocated:retail.PosQ.employeeQ)
}

// .retail.CustomerQ customerQ = 5;
inline bool PosQ::has_customerq() const {
  return this != internal_default_instance() && customerq_ != nullptr;
}
inline void PosQ::clear_customerq() {
  if (GetArenaNoVirtual() == nullptr && customerq_ != nullptr) {
    delete customerq_;
  }
  customerq_ = nullptr;
}
inline const ::retail::CustomerQ& PosQ::customerq() const {
  const ::retail::CustomerQ* p = customerq_;
  // @@protoc_insertion_point(field_get:retail.PosQ.customerQ)
  return p != nullptr ? *p : *reinterpret_cast<const ::retail::CustomerQ*>(
      &::retail::_CustomerQ_default_instance_);
}
inline ::retail::CustomerQ* PosQ::release_customerq() {
  // @@protoc_insertion_point(field_release:retail.PosQ.customerQ)
  
  ::retail::CustomerQ* temp = customerq_;
  customerq_ = nullptr;
  return temp;
}
inline ::retail::CustomerQ* PosQ::mutable_customerq() {
  
  if (customerq_ == nullptr) {
    auto* p = CreateMaybeMessage<::retail::CustomerQ>(GetArenaNoVirtual());
    customerq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:retail.PosQ.customerQ)
  return customerq_;
}
inline void PosQ::set_allocated_customerq(::retail::CustomerQ* customerq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete customerq_;
  }
  if (customerq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      customerq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customerq, submessage_arena);
    }
    
  } else {
    
  }
  customerq_ = customerq;
  // @@protoc_insertion_point(field_set_allocated:retail.PosQ.customerQ)
}

// int32 store_id = 6;
inline void PosQ::clear_store_id() {
  store_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosQ::store_id() const {
  // @@protoc_insertion_point(field_get:retail.PosQ.store_id)
  return store_id_;
}
inline void PosQ::set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:retail.PosQ.store_id)
}

// -------------------------------------------------------------------

// OutputVideoDatas

// .retail.OutputVideoDatas.CustomerMood mood = 1;
inline void OutputVideoDatas::clear_mood() {
  mood_ = 0;
}
inline ::retail::OutputVideoDatas_CustomerMood OutputVideoDatas::mood() const {
  // @@protoc_insertion_point(field_get:retail.OutputVideoDatas.mood)
  return static_cast< ::retail::OutputVideoDatas_CustomerMood >(mood_);
}
inline void OutputVideoDatas::set_mood(::retail::OutputVideoDatas_CustomerMood value) {
  
  mood_ = value;
  // @@protoc_insertion_point(field_set:retail.OutputVideoDatas.mood)
}

// int32 tc_no = 2;
inline void OutputVideoDatas::clear_tc_no() {
  tc_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputVideoDatas::tc_no() const {
  // @@protoc_insertion_point(field_get:retail.OutputVideoDatas.tc_no)
  return tc_no_;
}
inline void OutputVideoDatas::set_tc_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tc_no_ = value;
  // @@protoc_insertion_point(field_set:retail.OutputVideoDatas.tc_no)
}

// int32 store_id = 3;
inline void OutputVideoDatas::clear_store_id() {
  store_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OutputVideoDatas::store_id() const {
  // @@protoc_insertion_point(field_get:retail.OutputVideoDatas.store_id)
  return store_id_;
}
inline void OutputVideoDatas::set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:retail.OutputVideoDatas.store_id)
}

// -------------------------------------------------------------------

// StoreFrontCamera

// int32 store_id = 1;
inline void StoreFrontCamera::clear_store_id() {
  store_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreFrontCamera::store_id() const {
  // @@protoc_insertion_point(field_get:retail.StoreFrontCamera.store_id)
  return store_id_;
}
inline void StoreFrontCamera::set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreFrontCamera.store_id)
}

// int32 window_shoppers = 2;
inline void StoreFrontCamera::clear_window_shoppers() {
  window_shoppers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreFrontCamera::window_shoppers() const {
  // @@protoc_insertion_point(field_get:retail.StoreFrontCamera.window_shoppers)
  return window_shoppers_;
}
inline void StoreFrontCamera::set_window_shoppers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  window_shoppers_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreFrontCamera.window_shoppers)
}

// int32 passing_count = 3;
inline void StoreFrontCamera::clear_passing_count() {
  passing_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreFrontCamera::passing_count() const {
  // @@protoc_insertion_point(field_get:retail.StoreFrontCamera.passing_count)
  return passing_count_;
}
inline void StoreFrontCamera::set_passing_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passing_count_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreFrontCamera.passing_count)
}

// int32 go_in_count = 4;
inline void StoreFrontCamera::clear_go_in_count() {
  go_in_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreFrontCamera::go_in_count() const {
  // @@protoc_insertion_point(field_get:retail.StoreFrontCamera.go_in_count)
  return go_in_count_;
}
inline void StoreFrontCamera::set_go_in_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  go_in_count_ = value;
  // @@protoc_insertion_point(field_set:retail.StoreFrontCamera.go_in_count)
}

// -------------------------------------------------------------------

// HotSpots

// int32 location = 1;
inline void HotSpots::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HotSpots::location() const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.location)
  return location_;
}
inline void HotSpots::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:retail.HotSpots.location)
}

// int32 store_id = 2;
inline void HotSpots::clear_store_id() {
  store_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HotSpots::store_id() const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.store_id)
  return store_id_;
}
inline void HotSpots::set_store_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:retail.HotSpots.store_id)
}

// int32 counts = 3;
inline void HotSpots::clear_counts() {
  counts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HotSpots::counts() const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.counts)
  return counts_;
}
inline void HotSpots::set_counts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  counts_ = value;
  // @@protoc_insertion_point(field_set:retail.HotSpots.counts)
}

// string date = 4;
inline void HotSpots::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HotSpots::date() const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.date)
  return date_.GetNoArena();
}
inline void HotSpots::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.HotSpots.date)
}
inline void HotSpots::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.HotSpots.date)
}
inline void HotSpots::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.HotSpots.date)
}
inline void HotSpots::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.HotSpots.date)
}
inline std::string* HotSpots::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:retail.HotSpots.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HotSpots::release_date() {
  // @@protoc_insertion_point(field_release:retail.HotSpots.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HotSpots::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:retail.HotSpots.date)
}

// string time = 5;
inline void HotSpots::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HotSpots::time() const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.time)
  return time_.GetNoArena();
}
inline void HotSpots::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.HotSpots.time)
}
inline void HotSpots::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.HotSpots.time)
}
inline void HotSpots::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.HotSpots.time)
}
inline void HotSpots::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.HotSpots.time)
}
inline std::string* HotSpots::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:retail.HotSpots.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HotSpots::release_time() {
  // @@protoc_insertion_point(field_release:retail.HotSpots.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HotSpots::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:retail.HotSpots.time)
}

// repeated .retail.EmployeeQ employeeQ = 6;
inline int HotSpots::employeeq_size() const {
  return employeeq_.size();
}
inline void HotSpots::clear_employeeq() {
  employeeq_.Clear();
}
inline ::retail::EmployeeQ* HotSpots::mutable_employeeq(int index) {
  // @@protoc_insertion_point(field_mutable:retail.HotSpots.employeeQ)
  return employeeq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >*
HotSpots::mutable_employeeq() {
  // @@protoc_insertion_point(field_mutable_list:retail.HotSpots.employeeQ)
  return &employeeq_;
}
inline const ::retail::EmployeeQ& HotSpots::employeeq(int index) const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.employeeQ)
  return employeeq_.Get(index);
}
inline ::retail::EmployeeQ* HotSpots::add_employeeq() {
  // @@protoc_insertion_point(field_add:retail.HotSpots.employeeQ)
  return employeeq_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::EmployeeQ >&
HotSpots::employeeq() const {
  // @@protoc_insertion_point(field_list:retail.HotSpots.employeeQ)
  return employeeq_;
}

// repeated .retail.CustomerQ customerQ = 7;
inline int HotSpots::customerq_size() const {
  return customerq_.size();
}
inline void HotSpots::clear_customerq() {
  customerq_.Clear();
}
inline ::retail::CustomerQ* HotSpots::mutable_customerq(int index) {
  // @@protoc_insertion_point(field_mutable:retail.HotSpots.customerQ)
  return customerq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::CustomerQ >*
HotSpots::mutable_customerq() {
  // @@protoc_insertion_point(field_mutable_list:retail.HotSpots.customerQ)
  return &customerq_;
}
inline const ::retail::CustomerQ& HotSpots::customerq(int index) const {
  // @@protoc_insertion_point(field_get:retail.HotSpots.customerQ)
  return customerq_.Get(index);
}
inline ::retail::CustomerQ* HotSpots::add_customerq() {
  // @@protoc_insertion_point(field_add:retail.HotSpots.customerQ)
  return customerq_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::retail::CustomerQ >&
HotSpots::customerq() const {
  // @@protoc_insertion_point(field_list:retail.HotSpots.customerQ)
  return customerq_;
}

// -------------------------------------------------------------------

// Weather

// .retail.Weather.Type w_type = 1;
inline void Weather::clear_w_type() {
  w_type_ = 0;
}
inline ::retail::Weather_Type Weather::w_type() const {
  // @@protoc_insertion_point(field_get:retail.Weather.w_type)
  return static_cast< ::retail::Weather_Type >(w_type_);
}
inline void Weather::set_w_type(::retail::Weather_Type value) {
  
  w_type_ = value;
  // @@protoc_insertion_point(field_set:retail.Weather.w_type)
}

// string date = 2;
inline void Weather::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Weather::date() const {
  // @@protoc_insertion_point(field_get:retail.Weather.date)
  return date_.GetNoArena();
}
inline void Weather::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:retail.Weather.date)
}
inline void Weather::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:retail.Weather.date)
}
inline void Weather::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:retail.Weather.date)
}
inline void Weather::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:retail.Weather.date)
}
inline std::string* Weather::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:retail.Weather.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Weather::release_date() {
  // @@protoc_insertion_point(field_release:retail.Weather.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Weather::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:retail.Weather.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace retail

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::retail::CustomerQ_Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::retail::CustomerQ_Gender>() {
  return ::retail::CustomerQ_Gender_descriptor();
}
template <> struct is_proto_enum< ::retail::EmployeeQ_Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::retail::EmployeeQ_Gender>() {
  return ::retail::EmployeeQ_Gender_descriptor();
}
template <> struct is_proto_enum< ::retail::OutputVideoDatas_CustomerMood> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::retail::OutputVideoDatas_CustomerMood>() {
  return ::retail::OutputVideoDatas_CustomerMood_descriptor();
}
template <> struct is_proto_enum< ::retail::Weather_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::retail::Weather_Type>() {
  return ::retail::Weather_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_analytic_2eproto
