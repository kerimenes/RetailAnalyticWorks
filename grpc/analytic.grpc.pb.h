// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: analytic.proto
#ifndef GRPC_analytic_2eproto__INCLUDED
#define GRPC_analytic_2eproto__INCLUDED

#include "analytic.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace retail {

class ProductService final {
 public:
  static constexpr char const* service_full_name() {
    return "retail.ProductService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::StoreQ* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>> AsyncGetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>>(AsyncGetStoreInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>> PrepareAsyncGetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>>(PrepareAsyncGetStoreInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::Weather* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>> AsyncGetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>>(AsyncGetWheatherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>> PrepareAsyncGetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>>(PrepareAsyncGetWheatherRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::PosQ* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>> AsyncGetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>>(AsyncGetSalesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>> PrepareAsyncGetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>>(PrepareAsyncGetSalesInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::HotSpots* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>> AsyncGetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>>(AsyncGetHotSpotInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>> PrepareAsyncGetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>>(PrepareAsyncGetHotSpotInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::OutputVideoDatas* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>> AsyncGetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>>(AsyncGetOutputVideoDatasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>> PrepareAsyncGetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>>(PrepareAsyncGetOutputVideoDatasRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::StoreFrontCamera* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>> AsyncGetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>>(AsyncGetStoreFrontCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>> PrepareAsyncGetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>>(PrepareAsyncGetStoreFrontCameraRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreQ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStoreInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreQ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetStoreInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::Weather* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWheather(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::Weather* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::Weather* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetWheather(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::Weather* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::PosQ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSalesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::PosQ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::PosQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSalesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::PosQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::HotSpots* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHotSpotInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::HotSpots* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::HotSpots* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetHotSpotInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::HotSpots* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::OutputVideoDatas* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOutputVideoDatas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::OutputVideoDatas* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::OutputVideoDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetOutputVideoDatas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::OutputVideoDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreFrontCamera* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStoreFrontCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreFrontCamera* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreFrontCamera* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetStoreFrontCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreFrontCamera* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>* AsyncGetStoreInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreQ>* PrepareAsyncGetStoreInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>* AsyncGetWheatherRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::Weather>* PrepareAsyncGetWheatherRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>* AsyncGetSalesInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::PosQ>* PrepareAsyncGetSalesInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>* AsyncGetHotSpotInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::HotSpots>* PrepareAsyncGetHotSpotInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>* AsyncGetOutputVideoDatasRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::OutputVideoDatas>* PrepareAsyncGetOutputVideoDatasRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>* AsyncGetStoreFrontCameraRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::retail::StoreFrontCamera>* PrepareAsyncGetStoreFrontCameraRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::StoreQ* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>> AsyncGetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>>(AsyncGetStoreInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>> PrepareAsyncGetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>>(PrepareAsyncGetStoreInfoRaw(context, request, cq));
    }
    ::grpc::Status GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::Weather* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::Weather>> AsyncGetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::Weather>>(AsyncGetWheatherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::Weather>> PrepareAsyncGetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::Weather>>(PrepareAsyncGetWheatherRaw(context, request, cq));
    }
    ::grpc::Status GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::PosQ* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::PosQ>> AsyncGetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::PosQ>>(AsyncGetSalesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::PosQ>> PrepareAsyncGetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::PosQ>>(PrepareAsyncGetSalesInfoRaw(context, request, cq));
    }
    ::grpc::Status GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::HotSpots* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>> AsyncGetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>>(AsyncGetHotSpotInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>> PrepareAsyncGetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>>(PrepareAsyncGetHotSpotInfoRaw(context, request, cq));
    }
    ::grpc::Status GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::OutputVideoDatas* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>> AsyncGetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>>(AsyncGetOutputVideoDatasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>> PrepareAsyncGetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>>(PrepareAsyncGetOutputVideoDatasRaw(context, request, cq));
    }
    ::grpc::Status GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::retail::StoreFrontCamera* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>> AsyncGetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>>(AsyncGetStoreFrontCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>> PrepareAsyncGetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>>(PrepareAsyncGetStoreFrontCameraRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreQ* response, std::function<void(::grpc::Status)>) override;
      void GetStoreInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreQ* response, std::function<void(::grpc::Status)>) override;
      void GetStoreInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStoreInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::Weather* response, std::function<void(::grpc::Status)>) override;
      void GetWheather(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::Weather* response, std::function<void(::grpc::Status)>) override;
      void GetWheather(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::Weather* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetWheather(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::Weather* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::PosQ* response, std::function<void(::grpc::Status)>) override;
      void GetSalesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::PosQ* response, std::function<void(::grpc::Status)>) override;
      void GetSalesInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::PosQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSalesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::PosQ* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::HotSpots* response, std::function<void(::grpc::Status)>) override;
      void GetHotSpotInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::HotSpots* response, std::function<void(::grpc::Status)>) override;
      void GetHotSpotInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::HotSpots* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetHotSpotInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::HotSpots* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::OutputVideoDatas* response, std::function<void(::grpc::Status)>) override;
      void GetOutputVideoDatas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::OutputVideoDatas* response, std::function<void(::grpc::Status)>) override;
      void GetOutputVideoDatas(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::OutputVideoDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOutputVideoDatas(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::OutputVideoDatas* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreFrontCamera* response, std::function<void(::grpc::Status)>) override;
      void GetStoreFrontCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreFrontCamera* response, std::function<void(::grpc::Status)>) override;
      void GetStoreFrontCamera(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::retail::StoreFrontCamera* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStoreFrontCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::retail::StoreFrontCamera* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>* AsyncGetStoreInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::StoreQ>* PrepareAsyncGetStoreInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::Weather>* AsyncGetWheatherRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::Weather>* PrepareAsyncGetWheatherRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::PosQ>* AsyncGetSalesInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::PosQ>* PrepareAsyncGetSalesInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>* AsyncGetHotSpotInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::HotSpots>* PrepareAsyncGetHotSpotInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>* AsyncGetOutputVideoDatasRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::OutputVideoDatas>* PrepareAsyncGetOutputVideoDatasRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>* AsyncGetStoreFrontCameraRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::retail::StoreFrontCamera>* PrepareAsyncGetStoreFrontCameraRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStoreInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWheather_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSalesInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHotSpotInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOutputVideoDatas_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStoreFrontCamera_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStoreInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::StoreQ* response);
    virtual ::grpc::Status GetWheather(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::Weather* response);
    virtual ::grpc::Status GetSalesInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::PosQ* response);
    virtual ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::HotSpots* response);
    virtual ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::OutputVideoDatas* response);
    virtual ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::retail::StoreFrontCamera* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStoreInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoreInfo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::StoreQ>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWheather() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWheather(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::Weather>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSalesInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSalesInfo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::PosQ>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHotSpotInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHotSpotInfo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::HotSpots>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOutputVideoDatas() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOutputVideoDatas(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::OutputVideoDatas>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStoreFrontCamera() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoreFrontCamera(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::retail::StoreFrontCamera>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStoreInfo<WithAsyncMethod_GetWheather<WithAsyncMethod_GetSalesInfo<WithAsyncMethod_GetHotSpotInfo<WithAsyncMethod_GetOutputVideoDatas<WithAsyncMethod_GetStoreFrontCamera<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStoreInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::StoreQ>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::StoreQ* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetStoreInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetStoreInfo(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::StoreQ>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::StoreQ>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetWheather() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::Weather>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::Weather* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetWheather(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetWheather(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::Weather>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::Weather>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSalesInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::PosQ>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::PosQ* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSalesInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetSalesInfo(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::PosQ>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::PosQ>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetHotSpotInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::HotSpots>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::HotSpots* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHotSpotInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetHotSpotInfo(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::HotSpots>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::HotSpots>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOutputVideoDatas() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::OutputVideoDatas>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::OutputVideoDatas* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetOutputVideoDatas(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetOutputVideoDatas(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::OutputVideoDatas>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::OutputVideoDatas>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStoreFrontCamera() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::StoreFrontCamera>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::retail::StoreFrontCamera* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetStoreFrontCamera(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetStoreFrontCamera(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::retail::StoreFrontCamera>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::retail::StoreFrontCamera>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetStoreInfo<ExperimentalWithCallbackMethod_GetWheather<ExperimentalWithCallbackMethod_GetSalesInfo<ExperimentalWithCallbackMethod_GetHotSpotInfo<ExperimentalWithCallbackMethod_GetOutputVideoDatas<ExperimentalWithCallbackMethod_GetStoreFrontCamera<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStoreInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWheather() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSalesInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHotSpotInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOutputVideoDatas() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStoreFrontCamera() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStoreInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoreInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWheather() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWheather(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSalesInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSalesInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHotSpotInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHotSpotInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOutputVideoDatas() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOutputVideoDatas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStoreFrontCamera() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoreFrontCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStoreInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetStoreInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStoreInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWheather() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetWheather(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWheather(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSalesInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSalesInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSalesInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHotSpotInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHotSpotInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOutputVideoDatas() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetOutputVideoDatas(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStoreFrontCamera() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetStoreFrontCamera(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStoreInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStoreInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::StoreQ>(std::bind(&WithStreamedUnaryMethod_GetStoreInfo<BaseClass>::StreamedGetStoreInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStoreInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStoreInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStoreInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::StoreQ>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWheather : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWheather() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::Weather>(std::bind(&WithStreamedUnaryMethod_GetWheather<BaseClass>::StreamedGetWheather, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWheather() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWheather(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::Weather* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWheather(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::Weather>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSalesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSalesInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::PosQ>(std::bind(&WithStreamedUnaryMethod_GetSalesInfo<BaseClass>::StreamedGetSalesInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSalesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSalesInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::PosQ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSalesInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::PosQ>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHotSpotInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHotSpotInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::HotSpots>(std::bind(&WithStreamedUnaryMethod_GetHotSpotInfo<BaseClass>::StreamedGetHotSpotInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHotSpotInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHotSpotInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::HotSpots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHotSpotInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::HotSpots>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOutputVideoDatas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOutputVideoDatas() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::OutputVideoDatas>(std::bind(&WithStreamedUnaryMethod_GetOutputVideoDatas<BaseClass>::StreamedGetOutputVideoDatas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOutputVideoDatas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOutputVideoDatas(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::OutputVideoDatas* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOutputVideoDatas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::OutputVideoDatas>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStoreFrontCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStoreFrontCamera() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::retail::StoreFrontCamera>(std::bind(&WithStreamedUnaryMethod_GetStoreFrontCamera<BaseClass>::StreamedGetStoreFrontCamera, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStoreFrontCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStoreFrontCamera(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::retail::StoreFrontCamera* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStoreFrontCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::retail::StoreFrontCamera>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStoreInfo<WithStreamedUnaryMethod_GetWheather<WithStreamedUnaryMethod_GetSalesInfo<WithStreamedUnaryMethod_GetHotSpotInfo<WithStreamedUnaryMethod_GetOutputVideoDatas<WithStreamedUnaryMethod_GetStoreFrontCamera<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStoreInfo<WithStreamedUnaryMethod_GetWheather<WithStreamedUnaryMethod_GetSalesInfo<WithStreamedUnaryMethod_GetHotSpotInfo<WithStreamedUnaryMethod_GetOutputVideoDatas<WithStreamedUnaryMethod_GetStoreFrontCamera<Service > > > > > > StreamedService;
};

}  // namespace retail


#endif  // GRPC_analytic_2eproto__INCLUDED
